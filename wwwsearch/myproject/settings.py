"""
Django settings for myproject project.

Generated by 'django-admin startproject' using Django 1.11.3.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os
from concurrent_log_handler import ConcurrentRotatingFileHandler
from configs import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

LOGPATH = config['Django']['logpath']

if not os.path.exists(LOGPATH):
    LOGPATH=BASE_DIR

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config['Django']['secretkey']

# SECURITY WARNING: don't run with debug turned on in production!
#set DEBUG to False for full logging functions to work
try:
    if config['Django']['debug']=='False':
        DEBUG =  False
    else:
        DEBUG = True
except:
    DEBUG= True
    
ALLOWED_HOSTS = config['Django']['allowed_hosts'].split(',')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'notes',
    'ownsearch',
    'whatsapp',
    'dups',
    'pickfile',
    'documents.apps.DocumentsConfig',
    'scraper.apps.ScraperConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
SESSION_COOKIE_AGE = 3 * 60 * 60  #expire after three hours

ROOT_URLCONF = 'myproject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
#REMOVE FOR PRODUCTION
#WSGI_APPLICATION = 'myproject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(LOGPATH, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, "static/")

#get loglevels from user configs - or take defaults
try:
    console_loglevel=config['Django']['console_loglevel']
    logfile_loglevel=config['Django']['logfile_loglevel']
except:
    console_loglevel='INFO'
    logfile_loglevel='WARN'

LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {
        'standard': {
            'format' : "[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt' : "%d/%b/%Y %H:%M:%S"
        },
    },
    'handlers': {
        'null': {
            'level':'DEBUG',
            'class':'logging.NullHandler',
        },
        'logfile': {
            'level': logfile_loglevel,
            'class':'concurrent_log_handler.ConcurrentRotatingFileHandler',
            #'class':'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(LOGPATH, 'logfile'),
            'maxBytes': 5000000,
            'encoding':'utf8',
            'backupCount': 9, #number of backup files of old logs
            'formatter': 'standard',
        },
#        'logfile_watch': {
#            'level': logfile_loglevel,
#            'class':'logging.handlers.RotatingFileHandler',
#            'filename': os.path.join(BASE_DIR, 'logfile_watch'),
#            'maxBytes': 500000,
#            'backupCount': 9, #number of backup files of old logs
#            'formatter': 'standard',
#        },
        'console':{
            'level': console_loglevel,
            'class':'logging.StreamHandler',
            'formatter': 'standard'
        },
    },
    'loggers': {
        'django': {
            'handlers':['console'],
            'propagate': True,
            'level':'WARN',
        },
        'django.db.backends': {
            'handlers': ['console'],
            'level': 'WARN',
            'propagate': False,
        },
        'ownsearch': {
            'handlers': ['console', 'logfile'],
            'level': 'DEBUG', #ROOT LOG LEVEL -  CAN"T GO LOWER - 
        },
#        'watcher': {
#            'handlers': ['console', 'logfile_watch'],
#            'level': 'DEBUG', #ROOT LOG LEVEL -  CAN"T GO LOWER - 
#        },

    }
}
